# -*- coding: utf-8 -*-
"""Detection of Slowloris

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/21goldy/DOS_Detection---Project-Exhibition-1/blob/main/Detection_of_Slowloris.ipynb
"""

#@title Detection & Prevention of the Slow loris attack utilizing the IsolationForest algorithm and HTTP port blocking - Group 16 { display-mode: "form" }
# Detection & Prevention of the Slow loris attack utilizing the IsolationForest algorithm and HTTP port blocking - Group 16

# importing the required modules of python 

import io
import pandas as pd
from google.colab import files

upload_file = files.upload() # uploading the collected CSV from wireshark for DOS analysis and attack detection

for fn in upload_file.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(upload_file[fn])))

data = pd.read_csv(io.StringIO(upload_file['detect_test3.csv'].decode('utf-8'))) # reading the CSV file and storing it under the name "data"

data.shape # defining the total rows and columns present (Here total rows can also be understood as the number of transmissions captured)

transmission_count = data.shape[0] # storing the rows/transmissions captured as "transmission_count"

data.head() # representing the starting 5 data sets in "data"

data.tail() # representing the ending 5 data sets in "data"

data.describe() # description of the data present in the dataset "data"

data.Source # listing the Source IP's present in the captured file

source = data.Source 
source.nunique() # finding the unique IP's present in the Source column

destination = data.Destination
destination.nunique() # finding the unique IP's present in the Destination column

new_source = source.drop_duplicates() # removing the all the duplicates from the Source column
source_list = list(new_source) # creating list of all the unique IP's 
source_list
print(len(source_list))

major_ips = [] # empty list for keeping the majorly participating IP
minor_ips = [] # empty list for keeping the less participating IP
for i in source_list:
  analyse_ip = data[data.Source == i]
  transmission_of_ip = analyse_ip.shape[0]
  set_criteria = (transmission_count * 35)/100
  # print(set_criteria)
  if transmission_of_ip > set_criteria:
    major_ips.append(i)
  else:
    minor_ips.append(i)

major_ips # list of actively participating ip

minor_ips # list of less active ip

#@title Analysis of the Major IPs { display-mode: "form" }

for i in major_ips:
  dest_list_of_major_ip = list(data[data.Source == i].Destination.drop_duplicates()) # transmitted destination list of major IP
  major_df = pd.DataFrame(
      [
       (
           i,
           dest_list_of_major_ip,
           f'{data[data.Source == i].Protocol.max()}',
           f'{data[data.Source == i].Length.sum()}',
           'Attack'
       )
      ],
      columns=(
          'Source', 'Destination', 'Max_Protocol', 'Total_Length', 'Result'
          )
                 )
  major_df.to_csv (f'result_of_{i}.csv', index = False, header=True) # writing data in the csv file "result_of_{ip}"
  print(major_df.head())
  print(major_df.Destination)

a = data[data.Source == '10.0.2.15'] 
b = a[a.Destination == '192.185.184.157']
b # transmission between the major IP "a" = '10.0.2.15' to "b" = '192.185.184.157'

b.to_csv (r'transmission_1.csv', index = False, header=True) # writing data in the csv file "transmission_1"

c = data[data.Source == '192.185.184.157']
d = c[c.Destination == '10.0.2.15']
d # transmission between the major IP "c" = '192.185.184.157' to "d" = '10.0.2.15'

d.to_csv (r'transmission_2.csv', index = False, header=True) # writing data in the csv file "transmission_2"

#@title Analysis of the Minor IPs { display-mode: "form" }

for j in minor_ips:
  dest_list_of_minor_ip = list(data[data.Source == j].Destination.drop_duplicates()) # transmitted destination list of minor IP
  if data[data.Source == j].Length.sum() <= 13000:
    naive_df = pd.DataFrame(
    [
     (j, 
      dest_list_of_minor_ip,
      f'{data[data.Source == j].Protocol.max()}', 
      f'{data[data.Source == j].Length.sum()}', 
      'Naive'),
    ],
    columns=(
        'Source', 'Destination', 'Max_Protocol', 'Total_Length', 'Result'
        )
                 )
    print(naive_df)
    # print('==========================================================')

  else:
    suspicious_df = pd.DataFrame(
    [
     (j, 
      dest_list_of_minor_ip,
      f'{data[data.Source == j].Protocol.max()}', 
      f'{data[data.Source == j].Length.sum()}', 
      'Suspicious'),
    ],
    columns=(
        'Source', 'Destination', 'Max_Protocol', 'Total_Length', 'Result'
        )
                 )
    print(suspicious_df)
    # print('==========================================================')
